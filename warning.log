{"level":"warn","message":"Time: 2023-12-31 15:40:15 UserAlreadyRegistered: User is already registered","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 00:11:21 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 00:11:30 User not found: User not found","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 00:13:05 UnexpectedError: \nInvalid `db.post.findUnique()` invocation in\n/home/victor/Programming/School/src/comment/comment.service.ts:22:36\n\n  19 \n  20 export const createComment =async (postId: string, userId: string, comment: string, image: string) : Promise<PostResponse>=> {\n  21     try {\n→ 22         const post = await db.post.findUnique({\n               where: {\n                 id: undefined,\n             ?   AND?: PostWhereInput | PostWhereInput[],\n             ?   OR?: PostWhereInput[],\n             ?   NOT?: PostWhereInput | PostWhereInput[],\n             ?   body?: StringFilter | String,\n             ?   userId?: StringFilter | String,\n             ?   image?: StringNullableFilter | String | Null,\n             ?   createdAt?: DateTimeFilter | DateTime,\n             ?   updatedAt?: DateTimeFilter | DateTime,\n             ?   author?: UserRelationFilter | UserWhereInput,\n             ?   comments?: CommentListRelationFilter\n               }\n             })\n\nArgument `where` of type PostWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 00:15:01 UnexpectedError: \nInvalid `db.post.findUnique()` invocation in\n/home/victor/Programming/School/src/comment/comment.service.ts:22:36\n\n  19 \n  20 export const createComment =async (postId: string, userId: string, comment: string, image: string) : Promise<PostResponse>=> {\n  21     try {\n→ 22         const post = await db.post.findUnique({\n               where: {\n                 id: undefined,\n             ?   AND?: PostWhereInput | PostWhereInput[],\n             ?   OR?: PostWhereInput[],\n             ?   NOT?: PostWhereInput | PostWhereInput[],\n             ?   body?: StringFilter | String,\n             ?   userId?: StringFilter | String,\n             ?   image?: StringNullableFilter | String | Null,\n             ?   createdAt?: DateTimeFilter | DateTime,\n             ?   updatedAt?: DateTimeFilter | DateTime,\n             ?   author?: UserRelationFilter | UserWhereInput,\n             ?   comments?: CommentListRelationFilter\n               }\n             })\n\nArgument `where` of type PostWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 00:17:16 UnexpectedError: \nInvalid `db.post.findUnique()` invocation in\n/home/victor/Programming/School/src/comment/comment.service.ts:23:36\n\n  20 export const createComment =async (postId: string, userId: string, comment: string, image: string) : Promise<PostResponse>=> {\n  21     try {\n  22         console.log(postId)\n→ 23         const post = await db.post.findUnique({\n               where: {\n                 id: undefined,\n             ?   AND?: PostWhereInput | PostWhereInput[],\n             ?   OR?: PostWhereInput[],\n             ?   NOT?: PostWhereInput | PostWhereInput[],\n             ?   body?: StringFilter | String,\n             ?   userId?: StringFilter | String,\n             ?   image?: StringNullableFilter | String | Null,\n             ?   createdAt?: DateTimeFilter | DateTime,\n             ?   updatedAt?: DateTimeFilter | DateTime,\n             ?   author?: UserRelationFilter | UserWhereInput,\n             ?   comments?: CommentListRelationFilter\n               }\n             })\n\nArgument `where` of type PostWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 00:18:33 UnexpectedError: \nInvalid `db.post.findUnique()` invocation in\n/home/victor/Programming/School/src/comment/comment.service.ts:22:36\n\n  19 \n  20 export const createComment =async (postId: string, userId: string, comment: string, image: string) : Promise<PostResponse>=> {\n  21     try {\n→ 22         const post = await db.post.findUnique({\n               where: {\n                 id: undefined,\n             ?   AND?: PostWhereInput | PostWhereInput[],\n             ?   OR?: PostWhereInput[],\n             ?   NOT?: PostWhereInput | PostWhereInput[],\n             ?   body?: StringFilter | String,\n             ?   userId?: StringFilter | String,\n             ?   image?: StringNullableFilter | String | Null,\n             ?   createdAt?: DateTimeFilter | DateTime,\n             ?   updatedAt?: DateTimeFilter | DateTime,\n             ?   author?: UserRelationFilter | UserWhereInput,\n             ?   comments?: CommentListRelationFilter\n               }\n             })\n\nArgument `where` of type PostWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 00:19:55 UnexpectedError: \nInvalid `db.post.findUnique()` invocation in\n/home/victor/Programming/School/src/comment/comment.service.ts:22:36\n\n  19 \n  20 export const createComment =async (postId: string, userId: string, comment: string, image: string) : Promise<PostResponse>=> {\n  21     try {\n→ 22         const post = await db.post.findUnique({\n               where: {\n                 id: undefined,\n             ?   AND?: PostWhereInput | PostWhereInput[],\n             ?   OR?: PostWhereInput[],\n             ?   NOT?: PostWhereInput | PostWhereInput[],\n             ?   body?: StringFilter | String,\n             ?   userId?: StringFilter | String,\n             ?   image?: StringNullableFilter | String | Null,\n             ?   createdAt?: DateTimeFilter | DateTime,\n             ?   updatedAt?: DateTimeFilter | DateTime,\n             ?   author?: UserRelationFilter | UserWhereInput,\n             ?   comments?: CommentListRelationFilter\n               }\n             })\n\nArgument `where` of type PostWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 00:20:24 UnexpectedError: \nInvalid `db.post.findUnique()` invocation in\n/home/victor/Programming/School/src/comment/comment.service.ts:22:36\n\n  19 \n  20 export const createComment =async (postId: string, userId: string, comment: string, image: string) : Promise<PostResponse>=> {\n  21     try {\n→ 22         const post = await db.post.findUnique({\n               where: {\n                 id: undefined,\n             ?   AND?: PostWhereInput | PostWhereInput[],\n             ?   OR?: PostWhereInput[],\n             ?   NOT?: PostWhereInput | PostWhereInput[],\n             ?   body?: StringFilter | String,\n             ?   userId?: StringFilter | String,\n             ?   image?: StringNullableFilter | String | Null,\n             ?   createdAt?: DateTimeFilter | DateTime,\n             ?   updatedAt?: DateTimeFilter | DateTime,\n             ?   author?: UserRelationFilter | UserWhereInput,\n             ?   comments?: CommentListRelationFilter\n               }\n             })\n\nArgument `where` of type PostWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 00:20:55 UnexpectedError: \nInvalid `db.post.findUnique()` invocation in\n/home/victor/Programming/School/src/comment/comment.service.ts:22:36\n\n  19 \n  20 export const createComment =async (postId: string, userId: string, comment: string, image: string) : Promise<PostResponse>=> {\n  21     try {\n→ 22         const post = await db.post.findUnique({\n               where: {\n                 id: undefined,\n             ?   AND?: PostWhereInput | PostWhereInput[],\n             ?   OR?: PostWhereInput[],\n             ?   NOT?: PostWhereInput | PostWhereInput[],\n             ?   body?: StringFilter | String,\n             ?   userId?: StringFilter | String,\n             ?   image?: StringNullableFilter | String | Null,\n             ?   createdAt?: DateTimeFilter | DateTime,\n             ?   updatedAt?: DateTimeFilter | DateTime,\n             ?   author?: UserRelationFilter | UserWhereInput,\n             ?   comments?: CommentListRelationFilter\n               }\n             })\n\nArgument `where` of type PostWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 00:25:42 UnexpectedError: \nInvalid `db.post.findUnique()` invocation in\n/home/victor/Programming/School/src/comment/comment.service.ts:22:36\n\n  19 \n  20 export const createComment =async (postId: string, userId: string, comment: string, image: string) : Promise<PostResponse>=> {\n  21     try {\n→ 22         const post = await db.post.findUnique({\n               where: {\n                 id: undefined,\n             ?   AND?: PostWhereInput | PostWhereInput[],\n             ?   OR?: PostWhereInput[],\n             ?   NOT?: PostWhereInput | PostWhereInput[],\n             ?   body?: StringFilter | String,\n             ?   userId?: StringFilter | String,\n             ?   image?: StringNullableFilter | String | Null,\n             ?   createdAt?: DateTimeFilter | DateTime,\n             ?   updatedAt?: DateTimeFilter | DateTime,\n             ?   author?: UserRelationFilter | UserWhereInput,\n             ?   comments?: CommentListRelationFilter\n               }\n             })\n\nArgument `where` of type PostWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 00:29:42 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 00:31:58 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 00:36:14 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 12:19:02 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 12:19:17 User not found: User not found","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 12:20:14 UnexpectedError: \nInvalid `db.post.findUnique()` invocation in\n/home/victor/Programming/School/src/comment/comment.service.ts:22:36\n\n  19 \n  20 export const createComment =async (postId: string, userId: string, comment: string, image: string) : Promise<PostResponse>=> {\n  21     try {\n→ 22         const post = await db.post.findUnique({\n               where: {\n                 id: undefined,\n             ?   AND?: PostWhereInput | PostWhereInput[],\n             ?   OR?: PostWhereInput[],\n             ?   NOT?: PostWhereInput | PostWhereInput[],\n             ?   body?: StringFilter | String,\n             ?   userId?: StringFilter | String,\n             ?   image?: StringNullableFilter | String | Null,\n             ?   createdAt?: DateTimeFilter | DateTime,\n             ?   updatedAt?: DateTimeFilter | DateTime,\n             ?   author?: UserRelationFilter | UserWhereInput,\n             ?   comments?: CommentListRelationFilter\n               }\n             })\n\nArgument `where` of type PostWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 12:23:04 UnexpectedError: \nInvalid `db.post.findUnique()` invocation in\n/home/victor/Programming/School/src/comment/comment.service.ts:22:36\n\n  19 \n  20 export const createComment =async (postId: string, userId: string, comment: string, image: string) : Promise<PostResponse>=> {\n  21     try {\n→ 22         const post = await db.post.findUnique({\n               where: {\n                 id: undefined,\n             ?   AND?: PostWhereInput | PostWhereInput[],\n             ?   OR?: PostWhereInput[],\n             ?   NOT?: PostWhereInput | PostWhereInput[],\n             ?   body?: StringFilter | String,\n             ?   userId?: StringFilter | String,\n             ?   image?: StringNullableFilter | String | Null,\n             ?   createdAt?: DateTimeFilter | DateTime,\n             ?   updatedAt?: DateTimeFilter | DateTime,\n             ?   author?: UserRelationFilter | UserWhereInput,\n             ?   comments?: CommentListRelationFilter\n               }\n             })\n\nArgument `where` of type PostWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 12:31:27 UnexpectedError: \nInvalid `db.post.findUnique()` invocation in\n/home/victor/Programming/School/src/comment/comment.service.ts:22:36\n\n  19 \n  20 export const createComment =async (postId: string, userId: string, comment: string, image: string) : Promise<PostResponse>=> {\n  21     try {\n→ 22         const post = await db.post.findUnique({\n               where: {\n                 id: undefined,\n             ?   AND?: PostWhereInput | PostWhereInput[],\n             ?   OR?: PostWhereInput[],\n             ?   NOT?: PostWhereInput | PostWhereInput[],\n             ?   body?: StringFilter | String,\n             ?   userId?: StringFilter | String,\n             ?   image?: StringNullableFilter | String | Null,\n             ?   createdAt?: DateTimeFilter | DateTime,\n             ?   updatedAt?: DateTimeFilter | DateTime,\n             ?   author?: UserRelationFilter | UserWhereInput,\n             ?   comments?: CommentListRelationFilter\n               }\n             })\n\nArgument `where` of type PostWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 12:32:08 UnexpectedError: \nInvalid `db.post.findUnique()` invocation in\n/home/victor/Programming/School/src/comment/comment.service.ts:22:36\n\n  19 \n  20 export const createComment =async (postId: string, userId: string, comment: string, image: string) : Promise<PostResponse>=> {\n  21     try {\n→ 22         const post = await db.post.findUnique({\n               where: {\n                 id: undefined,\n             ?   AND?: PostWhereInput | PostWhereInput[],\n             ?   OR?: PostWhereInput[],\n             ?   NOT?: PostWhereInput | PostWhereInput[],\n             ?   body?: StringFilter | String,\n             ?   userId?: StringFilter | String,\n             ?   image?: StringNullableFilter | String | Null,\n             ?   createdAt?: DateTimeFilter | DateTime,\n             ?   updatedAt?: DateTimeFilter | DateTime,\n             ?   author?: UserRelationFilter | UserWhereInput,\n             ?   comments?: CommentListRelationFilter\n               }\n             })\n\nArgument `where` of type PostWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 12:40:52 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 12:41:10 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 12:42:32 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 12:44:54 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 12:46:27 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 12:47:26 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 12:50:50 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 13:39:25 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 13:46:19 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 13:51:49 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 13:55:00 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 14:05:00 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 14:24:05 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 14:27:16 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 14:38:47 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 14:40:01 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 14:41:23 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 14:50:45 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 16:44:47 CommentNotFound: Comment not found","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 16:44:47 UnexpectedError: Error fetching comment: Comment not found","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 17:54:45 You are not logged in: You are not logged in","service":"user-service"}
{"level":"warn","message":"Time: 2024-01-01 17:54:55 NotFound: Not found","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 17:55:28 You do not have enough permissions: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"Time: 2024-01-01 17:55:28 UnexpectedError: Error deleting comment: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-02 12:36:22 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-02 12:39:12 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-02 12:39:12 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-02 12:43:31 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-02 12:43:31 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-02 12:43:54 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-02 12:43:54 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-02 12:47:35 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-02 12:47:35 Error: Unexpected error occurred.","service":"user-service"}
{"level":"error","message":"2024-01-02 12:51:19 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-02 12:58:33 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-02 12:58:33 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-02 12:59:30 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-02 12:59:30 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-02 13:00:46 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-02 13:00:46 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-02 13:08:45 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-02 13:08:45 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-02 13:08:58 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-02 13:08:58 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-02 13:09:33 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-02 13:09:33 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-02 13:09:58 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-02 13:09:58 Error: Unexpected error occurred.","service":"user-service"}
{"level":"error","message":"2024-01-02 13:11:51 Error: \nInvalid `db.user.findUnique()` invocation in\n/home/victor/Programming/School/src/utils/helpers.ts:26:36\n\n  23 const userId = decodedToken.userId;\n  24 \n  25 // Use the user ID from the token in the findUnique call\n→ 26 const user = await db.user.findUnique({\n       where: {\n         id: undefined,\n     ?   username?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   password?: StringFilter | String,\n     ?   isActive?: BoolFilter | Boolean,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   profile?: UserProfileNullableRelationFilter | UserProfileWhereInput | Null,\n     ?   Post?: PostListRelationFilter,\n     ?   Comment?: CommentListRelationFilter\n       },\n       include: {\n         profile: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `username` or `email` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"warn","message":"2024-01-02 13:12:20 Warning: Not found: User not found","service":"user-service"}
{"level":"error","message":"2024-01-02 13:52:12 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 13:52:39 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 13:52:50 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:07:35 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:07:45 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:10:58 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:11:43 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:15:21 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:15:26 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:15:29 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:16:28 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:19:14 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:20:57 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:23:12 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:23:25 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:24:57 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:28:39 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:30:32 Error: Token verification failed","service":"user-service"}
{"level":"warn","message":"2024-01-02 14:41:13 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-02 14:42:37 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:42:41 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:50:36 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:58:51 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 14:59:20 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 15:00:04 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 15:00:31 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 15:02:15 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 15:19:27 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 15:25:00 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 15:26:02 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 15:26:40 Error: Token verification failed","service":"user-service"}
{"level":"error","message":"2024-01-02 15:27:37 Error: Token verification failed","service":"user-service"}
{"level":"warn","message":"2024-01-02 15:36:13 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-02 15:36:33 Warning: Not found: User not found","service":"user-service"}
{"level":"error","message":"2024-01-02 15:48:00 Error: \nInvalid `db.user.findUnique()` invocation in\n/home/victor/Programming/School/src/utils/helpers.ts:26:36\n\n  23 const userId = decodedToken.userId;\n  24 \n  25 // Use the user ID from the token in the findUnique call\n→ 26 const user = await db.user.findUnique({\n       where: {\n         id: undefined,\n     ?   username?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   password?: StringFilter | String,\n     ?   isActive?: BoolFilter | Boolean,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   profile?: UserProfileNullableRelationFilter | UserProfileWhereInput | Null,\n     ?   Post?: PostListRelationFilter,\n     ?   Comment?: CommentListRelationFilter\n       },\n       include: {\n         profile: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `username` or `email` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"2024-01-02 15:50:23 Error: Token verification failed","service":"user-service"}
{"level":"warn","message":"2024-01-02 16:06:09 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-02 16:10:15 Error: \nInvalid `db.user.findUnique()` invocation in\n/home/victor/Programming/School/src/utils/helpers.ts:26:36\n\n  23 const userId = decodedToken.userId;\n  24 \n  25 // Use the user ID from the token in the findUnique call\n→ 26 const user = await db.user.findUnique({\n       where: {\n         id: undefined,\n     ?   username?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   password?: StringFilter | String,\n     ?   isActive?: BoolFilter | Boolean,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   profile?: UserProfileNullableRelationFilter | UserProfileWhereInput | Null,\n     ?   Post?: PostListRelationFilter,\n     ?   Comment?: CommentListRelationFilter\n       },\n       include: {\n         profile: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `username` or `email` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"warn","message":"2024-01-02 16:45:57 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-02 16:46:57 Error: \nInvalid `db.user.findUnique()` invocation in\n/home/victor/Programming/School/src/utils/helpers.ts:26:36\n\n  23 const userId = decodedToken.userId;\n  24 \n  25 // Use the user ID from the token in the findUnique call\n→ 26 const user = await db.user.findUnique({\n       where: {\n         id: undefined,\n     ?   username?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   password?: StringFilter | String,\n     ?   isActive?: BoolFilter | Boolean,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   profile?: UserProfileNullableRelationFilter | UserProfileWhereInput | Null,\n     ?   Post?: PostListRelationFilter,\n     ?   Comment?: CommentListRelationFilter\n       },\n       include: {\n         profile: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `username` or `email` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"2024-01-02 17:02:54 Error: \nInvalid `db.user.findUnique()` invocation in\n/home/victor/Programming/School/src/utils/helpers.ts:26:36\n\n  23 const userId = decodedToken.userId;\n  24 \n  25 // Use the user ID from the token in the findUnique call\n→ 26 const user = await db.user.findUnique({\n       where: {\n         id: undefined,\n     ?   username?: String,\n     ?   email?: String,\n     ?   AND?: UserWhereInput | UserWhereInput[],\n     ?   OR?: UserWhereInput[],\n     ?   NOT?: UserWhereInput | UserWhereInput[],\n     ?   password?: StringFilter | String,\n     ?   isActive?: BoolFilter | Boolean,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   profile?: UserProfileNullableRelationFilter | UserProfileWhereInput | Null,\n     ?   Post?: PostListRelationFilter,\n     ?   Comment?: CommentListRelationFilter\n       },\n       include: {\n         profile: true\n       }\n     })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `username` or `email` arguments. Available options are marked with ?.","service":"user-service"}
{"level":"error","message":"2024-01-03 13:07:31 Error: \nInvalid `db.subjects.create()` invocation in\n/home/victor/Programming/School/src/subject/subject.services.ts:25:46\n\n  22 \n  23 export const createSubject =async (subject:string) => {\n  24     try {\n→ 25         const newSubject = await db.subjects.create({\n               data: {\n                 name: {\n                   name: \"Physics\"\n                 }\n                 ~~~~~~~~~~~~~~~~~\n               }\n             })\n\nArgument `name`: Invalid value provided. Expected String, provided Object.","service":"user-service"}
{"level":"error","message":"2024-01-03 13:09:26 Error: \nInvalid `db.subjects.create()` invocation in\n/home/victor/Programming/School/src/subject/subject.services.ts:25:46\n\n  22 \n  23 export const createSubject =async (subject:string) => {\n  24     try {\n→ 25         const newSubject = await db.subjects.create({\n               data: {\n                 name: {\n                   name: \"Physics\"\n                 }\n                 ~~~~~~~~~~~~~~~~~\n               }\n             })\n\nArgument `name`: Invalid value provided. Expected String, provided Object.","service":"user-service"}
{"level":"error","message":"2024-01-03 13:11:00 Error: \nInvalid `db.subjects.create()` invocation in\n/home/victor/Programming/School/src/subject/subject.services.ts:25:46\n\n  22 \n  23 export const createSubject =async (subject:string) => {\n  24     try {\n→ 25         const newSubject = await db.subjects.create({\n               data: {\n             +   name: String\n               }\n             })\n\nArgument `name` is missing.","service":"user-service"}
{"level":"error","message":"2024-01-03 13:11:33 Error: \nInvalid `db.subjects.create()` invocation in\n/home/victor/Programming/School/src/subject/subject.services.ts:25:46\n\n  22 \n  23 export const createSubject =async (subject:string) => {\n  24     try {\n→ 25         const newSubject = await db.subjects.create({\n               data: {\n             +   name: String\n               }\n             })\n\nArgument `name` is missing.","service":"user-service"}
{"level":"warn","message":"2024-01-03 14:41:23 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-03 15:10:36 Error: Teacher is already associated with the subject","service":"user-service"}
{"level":"error","message":"2024-01-03 15:11:09 Error: Teacher is already associated with the subject","service":"user-service"}
{"level":"warn","message":"2024-01-03 16:49:22 Warning: Not found: Subject not found","service":"user-service"}
{"level":"error","message":"2024-01-03 16:49:22 Error: Not found: Subject not found","service":"user-service"}
{"level":"warn","message":"2024-01-03 17:20:31 Warning: Not found: Subject not found in user profile","service":"user-service"}
{"level":"error","message":"2024-01-03 17:20:31 Error: Not found: Subject not found in user profile","service":"user-service"}
{"level":"warn","message":"2024-01-03 17:21:23 Warning: Not found: Subject not found","service":"user-service"}
{"level":"error","message":"2024-01-03 17:21:23 Error: Not found: Subject not found","service":"user-service"}
{"level":"warn","message":"2024-01-03 17:21:30 Warning: Not found: Subject not found","service":"user-service"}
{"level":"error","message":"2024-01-03 17:21:30 Error: Not found: Subject not found","service":"user-service"}
{"level":"warn","message":"2024-01-03 17:22:16 Warning: Not found: Subject not found in user profile","service":"user-service"}
{"level":"error","message":"2024-01-03 17:22:16 Error: Not found: Subject not found in user profile","service":"user-service"}
{"level":"warn","message":"2024-01-03 17:34:35 Warning: Not found: Subject not found in user profile","service":"user-service"}
{"level":"error","message":"2024-01-03 17:34:35 Error: Not found: Subject not found in user profile","service":"user-service"}
{"level":"warn","message":"2024-01-04 15:07:11 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-04 15:07:11 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-04 15:08:23 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-04 15:08:23 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-04 15:20:30 Warning: User is already registered","service":"user-service"}
{"level":"error","message":"2024-01-04 15:20:30 Error: Unexpected error occurred.","service":"user-service"}
{"level":"warn","message":"2024-01-04 15:22:31 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-04 15:24:33 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-04 15:25:14 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-04 15:26:30 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-04 15:33:02 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-04 15:50:38 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-04 15:53:23 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-04 15:59:55 Error: Wrong password","service":"user-service"}
{"level":"error","message":"2024-01-04 16:00:04 Error: Wrong password","service":"user-service"}
{"level":"warn","message":"2024-01-04 16:19:04 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-04 16:48:46 Warning: Not found: Blog not found","service":"user-service"}
{"level":"error","message":"2024-01-04 16:48:46 Error: Error fetching blog: Not found: Blog not found","service":"user-service"}
{"level":"warn","message":"2024-01-04 16:54:59 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-04 17:09:13 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-04 17:33:19 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-04 17:34:28 Warning: Not found: User not found","service":"user-service"}
{"level":"error","message":"2024-01-04 17:34:44 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-04 17:37:33 Error: You do not have enough permissions","service":"user-service"}
{"level":"warn","message":"2024-01-04 17:44:14 Warning: Not found: User not found","service":"user-service"}
{"level":"error","message":"2024-01-04 17:47:45 Error: Wrong password","service":"user-service"}
{"level":"error","message":"2024-01-04 17:52:34 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-04 17:53:21 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-04 17:58:28 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-04 18:01:09 Error: You do not have enough permissions","service":"user-service"}
{"level":"warn","message":"2024-01-04 18:01:59 Warning: Not found: Blog not found","service":"user-service"}
{"level":"warn","message":"2024-01-04 18:52:42 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-04 19:12:03 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-04 19:14:49 Warning: Not found: Comment not found","service":"user-service"}
{"level":"warn","message":"2024-01-04 21:30:49 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-04 21:33:02 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-04 21:34:57 Error: \nInvalid `db.subject.create()` invocation in\n/home/victor/Programming/School/src/subject/subject.service.ts:15:42\n\n  12 \n  13 export const createSubject =async (name:string) => {\n  14     try {\n→ 15         const subject = await db.subject.create({\n               data: {\n                 name: {\n                   name: \"Physics\"\n                 }\n                 ~~~~~~~~~~~~~~~~~\n               }\n             })\n\nArgument `name`: Invalid value provided. Expected String, provided Object.","service":"user-service"}
{"level":"error","message":"2024-01-04 21:35:49 Error: \nInvalid `db.subject.create()` invocation in\n/home/victor/Programming/School/src/subject/subject.service.ts:15:42\n\n  12 \n  13 export const createSubject =async (name:string) => {\n  14     try {\n→ 15         const subject = await db.subject.create({\n               data: {\n                 name: {\n                   name: \"Physics\"\n                 }\n                 ~~~~~~~~~~~~~~~~~\n               }\n             })\n\nArgument `name`: Invalid value provided. Expected String, provided Object.","service":"user-service"}
{"level":"error","message":"2024-01-04 21:44:31 Error: Subject already registered","service":"user-service"}
{"level":"error","message":"2024-01-04 21:44:31 Error: Subject already registered","service":"user-service"}
{"level":"warn","message":"2024-01-04 21:51:03 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-05 11:40:57 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-05 11:44:24 Warning: Not found: User doesnt exist","service":"user-service"}
{"level":"warn","message":"2024-01-05 11:51:27 Warning: Not found: Subject does not exist","service":"user-service"}
{"level":"warn","message":"2024-01-05 11:59:37 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-05 12:03:39 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-05 12:05:12 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-05 12:31:38 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-05 13:25:19 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-05 13:35:46 Warning: Not found: Teacher with ID subjects does not exist","service":"user-service"}
{"level":"warn","message":"2024-01-05 13:36:22 Warning: Not found: Teacher with ID subjects does not exist","service":"user-service"}
{"level":"warn","message":"2024-01-05 13:37:12 Warning: Not found: Teacher with ID subjects does not exist","service":"user-service"}
{"level":"warn","message":"2024-01-05 19:08:53 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-05 19:12:38 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-05 19:16:08 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-05 19:28:01 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-05 19:42:49 Warning: Not found: User not found","service":"user-service"}
{"level":"error","message":"2024-01-05 19:50:36 Error: Wrong password","service":"user-service"}
{"level":"error","message":"2024-01-05 19:51:35 Error: Wrong password","service":"user-service"}
{"level":"error","message":"2024-01-05 19:51:56 Error: Wrong password","service":"user-service"}
{"level":"warn","message":"2024-01-05 19:55:04 Warning: Not found: User not found","service":"user-service"}
{"level":"warn","message":"2024-01-05 20:14:08 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-05 20:19:11 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-05 20:19:36 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-05 20:22:16 Error: You do not have enough permissions","service":"user-service"}
{"level":"warn","message":"2024-01-05 20:48:42 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-05 20:59:03 Warning: Not found: Student not found","service":"user-service"}
{"level":"warn","message":"2024-01-05 21:05:02 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-05 21:20:23 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-05 21:23:19 Warning: Not found: Subject not found","service":"user-service"}
{"level":"warn","message":"2024-01-05 21:25:39 Warning: Not found: Subject not found","service":"user-service"}
{"level":"error","message":"2024-01-05 21:32:34 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-05 21:33:12 Error: You do not have enough permissions","service":"user-service"}
{"level":"warn","message":"2024-01-07 14:48:53 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 14:52:38 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 14:55:47 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 14:57:27 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-07 14:57:34 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 15:17:54 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 15:20:32 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-07 15:20:54 Error: Book already exists","service":"user-service"}
{"level":"warn","message":"2024-01-07 15:22:28 Warning: Not found: This user is not a library member","service":"user-service"}
{"level":"warn","message":"2024-01-07 15:38:20 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:02:57 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-07 16:07:19 Error: Book already exists","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:09:37 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:13:56 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:17:46 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:19:23 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:23:10 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:23:50 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:24:14 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:25:39 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:26:12 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:26:39 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:26:51 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:28:23 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:29:08 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:30:41 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:31:45 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:31:47 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:33:20 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:34:06 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:37:16 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:39:44 Warning: Not found: Book not found","service":"user-service"}
{"level":"error","message":"2024-01-07 16:40:36 Error: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:41:21 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:43:03 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:51:10 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 16:52:59 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 17:20:01 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 17:31:10 Warning: User is not verified","service":"user-service"}
{"level":"warn","message":"2024-01-07 17:32:25 Warning: Not found: Member does not exist","service":"user-service"}
{"level":"error","message":"2024-01-07 17:33:05 Error: User has overdue books","service":"user-service"}
{"level":"warn","message":"2024-01-07 17:35:35 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-07 17:35:54 Error: User has overdue books","service":"user-service"}
{"level":"warn","message":"2024-01-07 17:36:44 Warning: User is not verified","service":"user-service"}
{"level":"warn","message":"2024-01-07 17:36:48 Warning: User is not verified","service":"user-service"}
{"level":"warn","message":"2024-01-07 17:38:43 Warning: User is not verified","service":"user-service"}
{"level":"error","message":"2024-01-07 17:39:30 Error: User has overdue books","service":"user-service"}
{"level":"warn","message":"2024-01-07 17:55:13 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 18:10:33 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 18:17:10 Warning: Not found: Member does not exist","service":"user-service"}
{"level":"warn","message":"2024-01-07 18:18:09 Warning: Not found: Member does not exist","service":"user-service"}
{"level":"warn","message":"2024-01-07 18:26:08 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 18:59:54 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 20:22:47 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 20:39:53 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 20:40:42 Warning: Not found: Member not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 20:59:51 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-07 21:14:54 Error: Book already exists","service":"user-service"}
{"level":"warn","message":"2024-01-07 21:27:31 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-07 21:27:48 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-07 21:28:12 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-07 21:28:56 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-07 21:29:47 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-07 21:31:46 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-07 21:31:52 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-07 21:38:29 Error: You do not have enough permissions","service":"user-service"}
{"level":"warn","message":"2024-01-07 21:45:09 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 21:45:30 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 21:46:03 Warning: Not found: Book not found","service":"user-service"}
{"level":"warn","message":"2024-01-07 22:14:30 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-07 22:16:12 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-07 22:25:30 Error: You do not have enough permissions","service":"user-service"}
{"level":"error","message":"2024-01-07 22:25:49 Error: You do not have enough permissions","service":"user-service"}
{"level":"warn","message":"2024-01-07 23:20:45 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-07 23:43:26 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-08 10:12:44 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-08 10:13:54 Warning: Not found: You are not a member","service":"user-service"}
{"level":"warn","message":"2024-01-08 10:30:21 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-08 10:32:57 Warning: Not found: Member not found","service":"user-service"}
{"level":"warn","message":"2024-01-08 12:46:21 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-08 12:46:48 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 12:47:47 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 12:48:32 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 12:56:52 Warning: Not found: You are not a member","service":"user-service"}
{"level":"warn","message":"2024-01-08 12:57:01 Warning: Not found: You are not a member","service":"user-service"}
{"level":"warn","message":"2024-01-08 12:58:11 Warning: Not found: You are not a member","service":"user-service"}
{"level":"warn","message":"2024-01-08 12:58:37 Warning: Not found: You are not a member","service":"user-service"}
{"level":"warn","message":"2024-01-08 12:59:07 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 12:59:15 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 13:01:00 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 13:03:11 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 13:04:01 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 13:04:21 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 13:05:18 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 13:05:46 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 13:08:50 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 13:10:22 Warning: Not found: This book was not borrowed by this member","service":"user-service"}
{"level":"warn","message":"2024-01-08 14:34:26 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-08 17:12:12 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-08 17:12:28 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-08 17:13:30 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-08 17:14:01 Warning: Not found: User not found","service":"user-service"}
{"level":"warn","message":"2024-01-08 17:25:45 Warning: User is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-08 17:26:53 Warning: Email is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-08 17:37:08 Warning: You are not logged in","service":"user-service"}
{"level":"warn","message":"2024-01-08 17:39:10 Warning: Email is already registered","service":"user-service"}
{"level":"warn","message":"2024-01-08 17:41:08 Warning: User not found","service":"user-service"}
{"level":"warn","message":"2024-01-08 17:49:06 Warning: This blog has already been created","service":"user-service"}
{"level":"warn","message":"2024-01-08 17:58:52 Warning: You are not logged in","service":"user-service"}
{"level":"error","message":"2024-01-08 17:59:10 Error: Wrong password","service":"user-service"}
{"level":"error","message":"2024-01-08 17:59:39 Error: You are not authorised","service":"user-service"}
{"level":"warn","message":"2024-01-08 18:01:50 Warning: Blog not found","service":"user-service"}
{"level":"warn","message":"2024-01-08 18:03:39 Warning: Comment not found","service":"user-service"}
{"level":"warn","message":"2024-01-08 18:03:50 Warning: Comment not found","service":"user-service"}
{"level":"warn","message":"2024-01-08 18:03:52 Warning: Comment not found","service":"user-service"}
{"level":"warn","message":"2024-01-08 18:07:33 Warning: Subject not found","service":"user-service"}
