// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @unique @default(uuid())
  username         String          @unique
  email            String          @unique
  phone            String          @default("3456789234")
  avatar           String          @default("default.jpg")
  password         String
  isActive         Boolean         @default(false)
  studentProfile   StudentProfile?
  teacherProfile   TeacherProfile?
  role             Role            @default(USER)
  Post             Post[]
  Comment          Comment[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  studentProfileId String?
  teacherProfileId String?
}

model StudentProfile {
  id           String         @id @default(uuid())
  student      User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String         @unique
  subjects     Subject[]
  SubjectGrade SubjectGrade[]
}

model TeacherProfile {
  id        String    @id @default(uuid())
  teacher   User      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String    @unique
  subjects  Subject[]
}

enum Role {
  USER
  STUDENT
  TEACHER
  ADMIN
}

model Post {
  id        String    @id @default(uuid())
  title     String    @default("Untitled")
  body      String
  author    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  userId    String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id           String          @id @default(uuid())
  name         String          @unique
  teacher      TeacherProfile? @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId    String?
  student      StudentProfile? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String?
  SubjectGrade SubjectGrade[]
}

model SubjectGrade {
  id        String          @id @default(uuid())
  subject   Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String
  grade     Float
  student   StudentProfile? @relation(fields: [studentId], references: [id])
  studentId String?
}
